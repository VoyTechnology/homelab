---
- name: Ingress Internal | Add Tailscale Operator Chart
  kubernetes.core.helm_repository:
    name: tailscale
    # Use this repository until Tailscale decides to publish their own one.
    repo_url: https://pkgs.tailscale.com/helmcharts

- name: Ingress Internal | Deploy Tailscale Operator
  kubernetes.core.helm:
    name: tailscale-operator
    chart_ref: tailscale/tailscale-operator
    chart_version: "{{ internal_ingress_tailscale_chart_version }}"
    release_namespace: "{{ internal_ingress_namespace }}"
    update_repo_cache: true

- name: Ingress Internal | Add Nginx Ingress Chart
  kubernetes.core.helm_repository:
    name: ingress-nginx
    repo_url: https://kubernetes.github.io/ingress-nginx

- name: Ingress Internal | Deploy Internal Ingress
  kubernetes.core.helm:
    name: ingress-nginx
    force: true
    chart_ref: ingress-nginx/ingress-nginx
    chart_version: "{{ internal_ingress_nginx_chart_version }}"
    release_namespace: "{{ internal_ingress_namespace }}"
    update_repo_cache: true
    values:
      fullnameOverride: internal
      controller:
        name: ingress
        service:
          loadBalancerClass: tailscale
        ingressClassResource:
          name: internal
        config:
          http-snippet: |
            add_header              Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
            proxy_cache_path        /var/run/cache levels=1:2 keys_zone=authentication:10m inactive=3s;
          server-snippet: |
            location = /oauth2/auth {
              set $proxy_upstream_name "oauth-proxy";

              proxy_pass_request_body     off;
              proxy_set_header            Content-Length "";

              proxy_set_header            Host                    auth.{{ cluster_domain }};
              proxy_set_header            X-Original-URL          $scheme://$http_host$request_uri;
              proxy_set_header            X-Original-Method       $request_method;
              proxy_set_header            X-Auth-Request-Redirect $request_uri;
              proxy_set_header            X-Sent-From             "nginx-ingress-controller";

              proxy_http_version          1.1;
              proxy_ssl_server_name       on;
              proxy_pass_request_headers  on;
              client_max_body_size        "1m";

              # Cache responses from the auth proxy
              proxy_cache                   authentication;
              proxy_cache_key               $cookie__oauth2_proxy;
              proxy_cache_valid             202 401 3s;
              proxy_cache_lock              on;

              # Should still cache even with Set-Cookie
              proxy_ignore_headers          Set-Cookie;

              proxy_buffering on;
              proxy_buffer_size 128k;
              proxy_buffers 4 256k;
              proxy_busy_buffers_size 256k;

              add_header X-Cache-Status $upstream_cache_status always;

              set $target http://127.0.0.1:4180/oauth2/auth;
              proxy_pass $target;
            }
          global-auth-url: https://auth.{{ cluster_domain }}/oauth2/auth
          global-auth-signin: "https://auth.{{ cluster_domain }}/oauth2/start?rd=https://$host$request_uri$is_args$args"
          global-auth-response-headers: X-FORWARDED-EMAIL, X-FORWARDED-USER
        extraVolumeMounts:
        - name: cache-dir
          mountPath: /var/run/cache
        extraVolumes:
        - name: cache-dir
          emptyDir: {}
        extraContainers:
        - name: oauth2-proxy
          image: quay.io/oauth2-proxy/oauth2-proxy:latest
          args:
            - --reverse-proxy
            - --cookie-domain=.{{ cluster_domain }}
            - --whitelist-domain=.{{ cluster_domain }}
            - --redeem-url=https://login.{{ cluster_domain }}/token
            - --redirect-url=https://auth.{{ cluster_domain }}/oauth2/callback
            - --oidc-issuer-url=https://login.{{ cluster_domain }}
            - --login-url=https://login.{{ cluster_domain }}/auth
            - --http-address=0.0.0.0:4180
            - --proxy-prefix=/oauth2
            - --pass-access-token=true
            - --pass-authorization-header=true
            - --pass-host-header=true
            - --provider=oidc
            - --cookie-secure=false
            - --request-logging=true
            - --scope=email profile openid groups offline_access
            - --set-authorization-header=true
            - --set-xauthrequest=true
            - --prefer-email-to-user=true
            - --silence-ping-logging=true
            - --email-domain=*
          env:
          - name: OAUTH2_PROXY_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: client_id
                name: oauth2-proxy
          - name: OAUTH2_PROXY_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: client_secret
                name: oauth2-proxy
          - name: OAUTH2_PROXY_COOKIE_SECRET
            valueFrom:
              secretKeyRef:
                key: cookie_secret
                name: oauth2-proxy
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 4180
            name: http
            protocol: TCP

- name: Internal Ingress | Deploy oauth2-proxy service
  kubernetes.core.k8s:
    state: present
    definition: 
      apiVersion: v1
      kind: Service
      metadata:
        name: oauth2-proxy
        namespace: "{{ internal_ingress_namespace }}"
      spec:
        selector:
          app.kubernetes.io/component: controller
        ports:
          - port: 4180
            targetPort: 4180

- name: Internal Ingress | Deploy oauth2-proxy ingress
  kubernetes.core.k8s:
    state: present
    definition: 
      apiVersion: v1
      kind: Ingress
      metadata:
        name: oauth2-proxy
        namespace: "{{ internal_ingress_namespace }}"
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt
      spec:
        # ingressClassName: '' # is this ok or will this cause an infinite loop?
        rules:
        - host: "auth.{{ cluster_domain }}"
          http:
            paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: oauth2-proxy
                  port:
                    number: 4180
        tls:
        - secretName: auth-tls
          hosts:
          - "auth.{{ cluster_domain }}"
