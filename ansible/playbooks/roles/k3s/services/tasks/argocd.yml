---
- name: ArgoCD | Add Helm Repo
  kubernetes.core.helm_repository:
    name: argo
    repo_url: https://argoproj.github.io/argo-helm

- name: ArgoCD | Deploy Helm Chart
  kubernetes.core.helm:
    name: argocd
    chart_ref: argo/argo-cd
    chart_version: "{{ argocd_chart_version }}"
    release_namespace: "{{ argocd_k8s_namespace }}"
    values:
      server:
        extraArgs:
        - --insecure
        ingress:
          enabled: true
          annotations:
            cert-manager.io/cluster-issuer: letsencrypt
          hosts:
          - "argocd.{{ cluster_domain }}"
          tls:
          - hosts:
            - "argocd.{{ cluster_domain }}"
            secretName: argocd-cert
      controller:
        extraArgs:
        - --repo-server-timeout-seconds
        - "500" # account for slow Argo with multiple deps.
      repoServer:
        replicas: 2
        env:
          - name: "ARGOCD_EXEC_TIMEOUT"
            value: "5m"
      configs:
        cm:
          url: "https://argocd.{{ cluster_domain }}"
          oidc.config: |
            name: dex
            issuer: "https://login.{{ cluster_domain }}"
            clientID: $oidc.dex.clientID
            clientSecret:  $oidc.dex.clientSecret
          admin:
            enabled: false
        secret:
          extra:
            oidc.dex.clientID: "{{ dex_argo_client_id }}"
            oidc.dex.clientSecret: "{{ dex_argo_client_secret }}"
        rbac:
          policy.csv: |
            p, role:admin, applications, create, */*, allow
            p, role:admin, applications, update, */*, allow
            p, role:admin, applications, delete, */*, allow
            p, role:admin, applications, sync, */*, allow
            p, role:admin, applications, override, */*, allow
            p, role:admin, applications, action/*, */*, allow
            p, role:admin, applicationsets, get, */*, allow
            p, role:admin, applicationsets, create, */*, allow
            p, role:admin, applicationsets, update, */*, allow
            p, role:admin, applicationsets, delete, */*, allow
            p, role:admin, certificates, create, *, allow
            p, role:admin, certificates, update, *, allow
            p, role:admin, certificates, delete, *, allow
            p, role:admin, clusters, create, *, allow
            p, role:admin, clusters, update, *, allow
            p, role:admin, clusters, delete, *, allow
            p, role:admin, repositories, create, *, allow
            p, role:admin, repositories, update, *, allow
            p, role:admin, repositories, delete, *, allow
            p, role:admin, projects, create, *, allow
            p, role:admin, projects, update, *, allow
            p, role:admin, projects, delete, *, allow
            p, role:admin, accounts, update, *, allow
            p, role:admin, gpgkeys, create, *, allow
            p, role:admin, gpgkeys, delete, *, allow
            p, role:admin, exec, create, */*, allow

            g, {{ argocd_admin_email }}, role:admin
          scopes: "[email,groups]"
      dex:
        enabled: false # We use our own dex instance

- name: ArgoCD | Setup Projects
  with_items: "{{ argocd_projects }}"
  kubernetes.core.k8s:
    state: present
    template:
    - path: 'argo-project.yaml.j2'

- name: ArgoCD | Setup Application Namespaces
  no_log: true # Do not show logs as they contain private ssh keys
  with_items: "{{ argocd_applications }}"
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: "{{ item.namespace }}"

- name: ArgoCD | Setup Applications
  no_log: true # Do not show logs as they contain private ssh keys
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: ApplicationSet
      metadata:
        name: applications
        namespace: "{{ argocd_k8s_namespace }}"
      spec:
        generators:
          - list:
              elements: |
                {{ argocd_applications }}
        template:
          metadata:
            name: !unsafe "{{ name }}"
          spec:
            project: !unsafe "{{ project }}"
            source:
              repoURL: !unsafe "{{ repo }}"
              targetRevision: HEAD
              path: !unsafe "{{ path }}"
            destination:
              server: https://kubernetes.default.svc
              namespace: !unsafe "{{ namespace }}"
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
            syncOptions:
              - CreateNamespace=true

- name: ArgoCD | Add Deploy Keys
  no_log: true # Do not show logs as they contain private ssh keys
  with_items: "{{ argocd_applications }}"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ item.name }}-repo"
        # 
        # TODO: Revisit this as its weird to pull the namespace like that for tailscale.
        namespace: "{{ tailscale_ingress_namespace }}"
        labels:
          argocd.argoproj.io/secret-type: repository
      stringData:
        type: git
        url: "{{ item.repo }}"
        sshPrivateKey: "{{ item.sshPrivateKey }}"
