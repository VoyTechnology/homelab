domain: REPLACE_ME
cluster_name: REPLACE_ME

####################################################################################################
# Alloy
####################################################################################################

alloy:
  enabled: true
  controller:
    type: statefulset # Needed for clustering
    replicas: 1
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt
    ingressClassName: internal-shared
    faroPort: 12345 # Fake faro so we have access to the UI
    extraPaths:
      - path: /faro
        pathType: Prefix
        backend:
          service:
            name: monitoring-alloy
            port:
              number: 12347
  # Add environment variables for remote config
  extraEnvs:
    - name: REMOTE_CONFIG_URL
      valueFrom:
        secretKeyRef:
          name: shared-secrets
          key: grafana_cloud_remote_config_url
    - name: TOKEN
      valueFrom:
        secretKeyRef:
          name: shared-secrets
          key: grafana_cloud_token
    - name: PROMETHEUS_URL
      valueFrom:
        secretKeyRef:
          name: shared-secrets
          key: grafana_cloud_metrics_url
    - name: LOKI_URL
      valueFrom:
        secretKeyRef:
          name: shared-secrets
          key: grafana_cloud_logs_url
    - name: GRAFANA_USER
      valueFrom:
        secretKeyRef:
          name: shared-secrets
          key: grafana_cloud_user
    - name: LOKI_USER
      valueFrom:
        secretKeyRef:
          name: shared-secrets
          key: grafana_cloud_loki_user
  alloy:
    clustering:
      enabled: false
    stabilityLevel: experimental
    configMap:
      content: |
        logging {
          level = "info"
          format = "json"
        }

        livedebugging {
          enabled = true
        }

        // Enable remote configuration management
        remotecfg {
          url = env("REMOTE_CONFIG_URL")
          bearer_token = env("TOKEN")
        }

        // Minimal local config - everything else managed remotely
        // This ensures the agent can start and receive remote config
        discovery.kubernetes "node" {
          role = "node"
        }

####################################################################################################
# Node Exporter
####################################################################################################

prometheus-node-exporter:
  enabled: true
  prometheus:
    monitor:
      enabled: true
